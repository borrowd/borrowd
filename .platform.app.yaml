# Container configuration.

# Complete list of all available properties: https://docs.platform.sh/create-apps/app-reference.html

# The name of this app. Must be unique within a project.
name: borrowd

# The runtime the application uses. The 'type' key defines the base container
# image that will be used to run the application. There is a separate base
# container image for each primary language for the application,
# in multiple versions. Check the Python documentation
# (https://docs.platform.sh/languages/python.html#supported-versions)
# to find the supported versions for the 'python' type.
type: 'python:3.13'
dependencies:
  python3:
    uv: "*"

# The following block defines a single writable directory, 'media/'
# The 'source' specifies where the writable mount is. The 'local' source
# indicates that the mount point will point to a local directory on the
# application container. The 'source_path' specifies the subdirectory
# from within the source that the mount should point at.
#
# This should be not be used in prod once we integrate an actual CDN (e.g. Wasabi)
# although it may still be useful for staging/cert environments.
mounts:
  'media':
    source: local
    source_path: media
  # 'logs':
  #   source: local
  #   source_path: logs

# The size of the persistent disk of the application (in MB).
disk: 2048

# The relationships of the application with services or other applications.
#
# The left-hand side is the name of the relationship as it will be exposed
# to the application in the PLATFORM_RELATIONSHIPS variable. The right-hand
# side is in the form '<service name>:<endpoint name>'.
relationships:
    db: 'db:postgresql'

# The web key configures the web server running in front of your app.
# More information: https://docs.platform.sh/create-apps/app-reference.html#web
web:
  # Commands are run once after deployment to start the application process.
  # More information: https://docs.platform.sh/create-apps/app-reference.html#web-commands
  commands:
    # The command to launch your app. If it terminates, it’s restarted immediately.
    #
    # using gunicorn as opposed to uvi/hypercorn or daphne since we do not make use of async or websockets right now
    start: "uv run gunicorn -w 4 -b unix:$SOCKET borrowd.wsgi:application"

  # More information: https://docs.platform.sh/configuration/app-containers.html#upstream
  upstream:
    # Whether your app should speak to the webserver via TCP or Unix socket. Defaults to tcp
    # More information: https://docs.platform.sh/create-apps/app-reference.html#where-to-listen
    socket_family: unix

  # Each key in locations is a path on your site with a leading /.
  # More information: https://docs.platform.sh/create-apps/app-reference.html#locations
  locations:
    "/":
      # Whether to forward disallowed and missing resources from this location to the app. A string is a path
      # with a leading / to the controller, such as /index.php.
      passthru: true
    "/static":
      # The directory to serve static assets for this location relative to the app’s root directory. Must be an
      # actual directory inside the root directory.
      root: "staticfiles"
      # The number of seconds whitelisted (static) content should be cached.
      expires: 1h
      # Whether to allow serving files which don’t match a rule.
      allow: true
    "/media":
      # Serves media files from container's local mount.
      # This could be removed or used for staging/cert environments after CDN/Wasabi integration.
      # We will eventually need to consider how to handle permission-based media access.
      root: "media"
      allow: true
      expires: 1h


# Hooks allow you to customize your code/environment as the project moves through the build and deploy stages
# More information: https://docs.platform.sh/create-apps/app-reference.html#hooks
hooks:
  # The build hook is run after any build flavor.
  # More information: https://docs.platform.sh/create-apps/hooks/hooks-comparison.html#build-hook
  #
  # Currently this copies the platform env file into its expected location, but this could be removed
  # in favor of setting all hosted environment variables in the platform.sh CLI/console and eventually
  # if we want staging/cert that will probably need to be the approach
  build: |
    env
    set -eu

    cp .env.platform .env

    # Set up Python virtual environment
    uv venv

    # Install dependencies
    uv sync

    # For vite
    npm install
    npm run build

    # Collect static assets
    uv run manage.py collectstatic --noinput

  # The deploy hook is run after the app container has been started, but before it has started accepting requests.
  # More information: https://docs.platform.sh/create-apps/hooks/hooks-comparison.html#deploy-hook
  deploy: uv run manage.py migrate

  # This hook runs after every deploy so fixtures should ideally be idempotent/static (e.g. use PKs)
  post_deploy: |
    echo "Loading fixtures..."

    echo "Loading item categories..."
    uv run manage.py loaddata items/item_categories
